import os
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from db import get_db, migrate
from config import BOT_TOKEN

# ------------------ –•–µ–Ω–¥–ª–µ—Ä—ã ------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –¥–æ–Ω–∞—Ç-–±–æ—Ç –¥–ª—è Brawl Stars!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
            [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ])
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –º–µ–Ω—é.")

async def handle_payment_proof(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É.")

# ------------------ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ------------------
PORT = int(os.environ.get("PORT", 10000))
BOT_URL = os.environ.get("BOT_URL")  # Render URL

async def main():
    await migrate()

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_payment_proof))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")

    # –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞ –±–µ–∑ asyncio.run()
    await app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=f"{BOT_URL}/{BOT_TOKEN}"
    )

# ------------------ –ó–∞–ø—É—Å–∫ ------------------
if __name__ == "__main__":
    import asyncio

    # Render —É–∂–µ –∏–º–µ–µ—Ç running loop, —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    loop.create_task(main())
    loop.run_forever()
