import os
import nest_asyncio
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, filters
)

from config import BOT_TOKEN, ADMIN_IDS, PAYMENT_TEXT, QIWI_NUMBER, YOOMONEY_WALLET
from db import get_db, migrate

nest_asyncio.apply()  # –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π loop


# ----------------------- –£—Ç–∏–ª–∏—Ç—ã -----------------------
def order_code(order_id: int) -> str:
    return f"ORDER-{order_id:06d}"


async def get_or_create_user(update: Update):
    u = update.effective_user
    async with get_db() as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?);",
            (u.id, u.username, u.first_name)
        )


async def list_active_products():
    async with get_db() as db:
        cur = await db.execute(
            "SELECT id, name, price, description FROM products WHERE is_active=1 ORDER BY id;"
        )
        return await cur.fetchall()


async def create_order(user_id: int, product_id: int, price: int) -> int:
    async with get_db() as db:
        cur = await db.execute(
            "INSERT INTO orders (user_id, product_id, price, status) VALUES (?, ?, ?, 'awaiting_payment');",
            (user_id, product_id, price)
        )
        return cur.lastrowid


# ----------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ -----------------------
def main_menu_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])


# ----------------------- –ö–æ–º–∞–Ω–¥—ã -----------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await get_or_create_user(update)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –¥–æ–Ω–∞—Ç–∞ Brawl Stars!",
        reply_markup=main_menu_kb()
    )


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–∏–¥–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–¢–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –º–µ–Ω—é.",
        reply_markup=main_menu_kb()
    )


# ----------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ/–¥–æ–∫–æ–≤ -----------------------
async def handle_payment_proof(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_id = None
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
    elif update.message.document:
        file_id = update.message.document.file_id
    else:
        return

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É.")


# ----------------------- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è -----------------------
async def main():
    # –º–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã
    await migrate()

    # —Å–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(BOT_TOKEN).build()

    # –¥–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_payment_proof))

    # TODO: –î–æ–±–∞–≤—å —Å—é–¥–∞ CallbackQueryHandler –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –∑–∞–∫–∞–∑–æ–≤

    PORT = int(os.environ.get("PORT", 8443))
    URL = os.environ.get("RENDER_EXTERNAL_URL", "https://bs-donate-bot.onrender.com")
    webhook_path = f"/{BOT_TOKEN}"

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")

    # –∑–∞–ø—É—Å–∫ webhook
    await app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=f"{URL}{webhook_path}"
    )


# ----------------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ -----------------------
if __name__ == "__main__":
    import asyncio
    asyncio.get_event_loop().run_until_complete(main())
