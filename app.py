import os
import asyncio
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, filters
)
from config import BOT_TOKEN
from db import get_db, migrate

# ----------------------- –£—Ç–∏–ª–∏—Ç—ã -----------------------
def order_code(order_id: int) -> str:
    return f"ORDER-{order_id:06d}"

async def get_or_create_user(update: Update):
    u = update.effective_user
    async with get_db() as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?);",
            (u.id, u.username, u.first_name)
        )

async def list_active_products():
    async with get_db() as db:
        cur = await db.execute(
            "SELECT id, name, price, description FROM products WHERE is_active=1 ORDER BY id;"
        )
        return await cur.fetchall()

async def create_order(user_id: int, product_id: int, price: int) -> int:
    async with get_db() as db:
        cur = await db.execute(
            "INSERT INTO orders (user_id, product_id, price, status) VALUES (?, ?, ?, 'awaiting_payment');",
            (user_id, product_id, price)
        )
        return cur.lastrowid

# ----------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ -----------------------
def main_menu_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])

def back_to_menu_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def product_kb(product_id: int):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å", callback_data=f"buy_{product_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="catalog")]
    ])

# ----------------------- –ö–æ–º–∞–Ω–¥—ã -----------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await get_or_create_user(update)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –¥–æ–Ω–∞—Ç–∞ Brawl Stars!",
        reply_markup=main_menu_kb()
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–∏–¥–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–¢–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –º–µ–Ω—é.",
        reply_markup=main_menu_kb()
    )

# ----------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ CallbackQuery -----------------------
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "main_menu":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    
    elif query.data == "catalog":
        products = await list_active_products()
        if not products:
            await query.edit_message_text("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.", reply_markup=back_to_menu_kb())
            return
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
        product = products[0]
        text = f"{product['name']} ‚Äî {product['price']}‚ÇΩ\n{product['description']}"
        await query.edit_message_text(
            text,
            reply_markup=product_kb(product['id'])
        )
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∏–Ω–¥–µ–∫—Å –≤ context
        context.user_data["products"] = products
        context.user_data["index"] = 0

    elif query.data.startswith("buy_"):
        product_id = int(query.data.split("_")[1])
        user_id = query.from_user.id
        products = await list_active_products()
        product = next((p for p in products if p["id"] == product_id), None)
        if product:
            order_id = await create_order(user_id, product_id, product["price"])
            await query.edit_message_text(
                f"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –í–∞—à –∫–æ–¥ –∑–∞–∫–∞–∑–∞: {order_code(order_id)}\n"
                f"–û–ø–ª–∞—Ç–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —á–∞—Ç.",
                reply_markup=main_menu_kb()
            )
        else:
            await query.edit_message_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_to_menu_kb())

    elif query.data == "my_orders":
        await query.edit_message_text("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", reply_markup=back_to_menu_kb())

    elif query.data == "help":
        await query.edit_message_text(
            "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n–ê–¥–º–∏–Ω —É–≤–∏–¥–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            reply_markup=back_to_menu_kb()
        )

# ----------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ/–¥–æ–∫–æ–≤ -----------------------
async def handle_payment_proof(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_id = None
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
    elif update.message.document:
        file_id = update.message.document.file_id
    else:
        return
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É.")

# ----------------------- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è -----------------------
async def main():
    await migrate()

    app = Application.builder().token(BOT_TOKEN).build()

    # –•–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_payment_proof))
    app.add_handler(CallbackQueryHandler(menu_handler))

    # Webhook –¥–ª—è Render
    PORT = int(os.environ.get("PORT", 8443))
    URL = os.environ.get("RENDER_EXTERNAL_URL", "//https://bs-donate-bot.onrender.com")
    webhook_path = f"/{BOT_TOKEN}"

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    await app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=f"{URL}{webhook_path}"
    )

# ----------------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ -----------------------
if __name__ == "__main__":
    asyncio.run(main())
