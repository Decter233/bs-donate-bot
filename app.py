import asyncio
from typing import Optional

from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

from config import BOT_TOKEN, ADMIN_IDS, PAYMENT_TEXT, QIWI_NUMBER, YOOMONEY_WALLET
from db import get_db, migrate

def order_code(order_id: int) -> str:
    return f"ORDER-{order_id:06d}"

async def get_or_create_user(update: Update):
    u = update.effective_user
    async with get_db() as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?);",
            (u.id, u.username, u.first_name)
        )

async def list_active_products():
    async with get_db() as db:
        cur = await db.execute("SELECT id, name, price, description FROM products WHERE is_active=1 ORDER BY id;")
        rows = await cur.fetchall()
        return rows

async def create_order(user_id: int, product_id: int, price: int) -> int:
    async with get_db() as db:
        cur = await db.execute(
            "INSERT INTO orders (user_id, product_id, price, status) VALUES (?, ?, ?, 'awaiting_payment');",
            (user_id, product_id, price)
        )
        return cur.lastrowid

async def set_order_status(order_id: int, status: str, note: Optional[str] = None):
    async with get_db() as db:
        await db.execute(
            "UPDATE orders SET status=?, note=?, updated_at=CURRENT_TIMESTAMP WHERE id=?;",
            (status, note, order_id)
        )

async def get_order(order_id: int):
    async with get_db() as db:
        sql = (
            "SELECT o.id, o.user_id, p.name, o.price, o.status, o.created_at "
            "FROM orders o JOIN products p ON p.id=o.product_id "
            "WHERE o.id=?"
        )
        cur = await db.execute(sql, (order_id,))
        return await cur.fetchone()

async def record_payment(order_id: int, amount: int, proof_file_id: Optional[str]):
    async with get_db() as db:
        await db.execute(
            "INSERT INTO payments (order_id, amount, proof_file_id) VALUES (?, ?, ?);",
            (order_id, amount, proof_file_id)
        )

def main_menu_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await get_or_create_user(update)
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –¥–æ–Ω–∞—Ç–∞ Brawl Stars! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    if update.message:
        await update.message.reply_text(text, reply_markup=main_menu_kb())
    else:
        await update.callback_query.edit_message_text(text, reply_markup=main_menu_kb())

async def catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = await list_active_products()
    if not rows:
        txt = "–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(txt, reply_markup=main_menu_kb())
        else:
            await update.message.reply_text(txt, reply_markup=main_menu_kb())
        return
    keyboard = []
    for pid, name, price, _ in rows:
        keyboard.append([InlineKeyboardButton(f"{name} ‚Äî {price}‚ÇΩ", callback_data=f"prod_{pid}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")])
    kb = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        q = update.callback_query
        await q.answer()
        await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)

async def product_view(update: Update, context: ContextTypes.DEFAULT_TYPE, product_id: int):
    async with get_db() as db:
        cur = await db.execute("SELECT id, name, price, description FROM products WHERE id=?;", (product_id,))
        row = await cur.fetchone()
    if not row:
        await update.callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    pid, name, price, description = row
    text = f"*{name}* ‚Äî *{price}‚ÇΩ*\n\n{description or ''}\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑."
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"buy_{pid}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
    ])
    await update.callback_query.edit_message_text(text, reply_markup=kb, parse_mode="Markdown")

async def buy_product(update: Update, context: ContextTypes.DEFAULT_TYPE, product_id: int):
    async with get_db() as db:
        cur = await db.execute("SELECT id, name, price FROM products WHERE id=?;", (product_id,))
        row = await cur.fetchone()
    if not row:
        await update.callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    pid, name, price = row
    order_id = await create_order(update.effective_user.id, pid, price)
    oc = order_code(order_id)
    pay_lines = []
    if YOOMONEY_WALLET:
        pay_lines.append(f"–ÆMoney: `{YOOMONEY_WALLET}`")
    if QIWI_NUMBER:
        pay_lines.append(f"QIWI: `{QIWI_NUMBER}`")
    pay_info = "\n".join(pay_lines) if pay_lines else "–ÆMoney / QIWI —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É—Ç–æ—á–Ω—è–π—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    text = (
        f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: *{name}* –∑–∞ *{price}‚ÇΩ*.\n"
        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: *{oc}*\n\n"
        f"{PAYMENT_TEXT.format(order_code=oc)}\n\n"
        f"{pay_info}\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *—Å–∫—Ä–∏–Ω—à–æ—Ç* –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)¬ª."
    )
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)", callback_data=f"paid_{order_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_main")]
    ])
    await update.callback_query.edit_message_text(text, reply_markup=kb, parse_mode="Markdown")
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                admin_id,
                f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ {oc}\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {update.effective_user.mention_html()}\n–¢–æ–≤–∞—Ä: {name}\n–°—É–º–º–∞: {price}‚ÇΩ",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—á–µ–Ω–æ", callback_data=f"admin_mark_paid_{order_id}"),
                                                   InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{order_id}")]])
            )
        except Exception:
            pass

async def my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with get_db() as db:
        sql = (
            "SELECT o.id, p.name, o.price, o.status, o.created_at "
            "FROM orders o JOIN products p ON p.id=o.product_id "
            "WHERE o.user_id=? ORDER BY o.id DESC LIMIT 10;"
        )
        cur = await db.execute(sql, (update.effective_user.id,))
        rows = await cur.fetchall()
    if not rows:
        txt = "–ü–æ–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç."
    else:
        lines = []
        for oid, name, price, status, created in rows:
            lines.append(f"{order_code(oid)} ‚Äî {name} ‚Äî {price}‚ÇΩ ‚Äî {status}")
        txt = "–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n" + "\n".join(lines)
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(txt, reply_markup=main_menu_kb())
    else:
        await update.message.reply_text(txt, reply_markup=main_menu_kb())

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–∏–¥–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–¢–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –º–µ–Ω—é."
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(txt, reply_markup=main_menu_kb())
    else:
        await update.message.reply_text(txt, reply_markup=main_menu_kb())

async def handle_payment_proof(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    file_id = None
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
    elif update.message.document:
        file_id = update.message.document.file_id
    else:
        return
    async with get_db() as db:
        cur = await db.execute(
            "SELECT id, price FROM orders WHERE user_id=? AND status='awaiting_payment' ORDER BY id DESC LIMIT 1;",
            (u.id,)
        )
        row = await cur.fetchone()
    if not row:
        await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.")
        return
    order_id, price = row
    await record_payment(order_id, amount=price, proof_file_id=file_id)
    oc = order_code(order_id)
    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ! –ß–µ–∫ –¥–ª—è {oc} –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    for admin_id in ADMIN_IDS:
        try:
            if update.message.photo:
                await context.bot.send_photo(admin_id, file_id, caption=f"üßæ –ß–µ–∫ –ø–æ {oc} –æ—Ç @{u.username or u.id}")
            elif update.message.document:
                await context.bot.send_document(admin_id, file_id, caption=f"üßæ –ß–µ–∫ –ø–æ {oc} –æ—Ç @{u.username or u.id}")
            await context.bot.send_message(admin_id, f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑ {oc}?",
                                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—á–µ–Ω–æ", callback_data=f"admin_mark_paid_{order_id}"),
                                                                               InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{order_id}")]]))
        except Exception:
            pass

def admin_only(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        uid = update.effective_user.id
        if uid not in ADMIN_IDS:
            if update.callback_query:
                await update.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            else:
                await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return
        return await func(update, context, *args, **kwargs)
    return wrapper

@admin_only
async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üßæ –ó–∞–∫–∞–∑—ã (–æ–∂–∏–¥–∞—é—Ç)", callback_data="admin_orders_pending")],
        [InlineKeyboardButton("‚ûï –¢–æ–≤–∞—Ä—ã (–¥–æ–±–∞–≤–∏—Ç—å)", callback_data="admin_add_product")],
        [InlineKeyboardButton("üì¶ –¢–æ–≤–∞—Ä—ã (—Å–ø–∏—Å–æ–∫)", callback_data="admin_list_products")]
    ])
    if update.message:
        await update.message.reply_text("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=kb)
    else:
        await update.callback_query.edit_message_text("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=kb)

@admin_only
async def admin_orders_pending(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with get_db() as db:
        sql = ("SELECT o.id, p.name, o.price, o.created_at, u.username FROM orders o JOIN products p ON p.id=o.product_id JOIN users u ON u.user_id=o.user_id WHERE o.status='awaiting_payment' ORDER BY o.id ASC LIMIT 20;")
        cur = await db.execute(sql)
        rows = await cur.fetchall()
    if not rows:
        txt = "–û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç."
    else:
        lines = []
        for oid, pname, price, created, username in rows:
            lines.append(f"{order_code(oid)} ‚Äî {pname} ‚Äî {price}‚ÇΩ ‚Äî @{username or 'user'}")
        txt = "–û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã:\n" + "\n".join(lines)
    await update.callback_query.edit_message_text(txt, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]]))

@admin_only
async def admin_mark_paid(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: int):
    await set_order_status(order_id, "paid")
    oc = order_code(order_id)
    await update.callback_query.answer(f"{oc} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π", show_alert=True)
    order = await get_order(order_id)
    if order:
        _, user_id, pname, price, status, _ = order
        try:
            await context.bot.send_message(user_id, f"–í–∞—à –∑–∞–∫–∞–∑ {oc} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ–Ω–∞—Ç–∞.")
        except Exception:
            pass

@admin_only
async def admin_reject(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: int):
    await set_order_status(order_id, "rejected")
    oc = order_code(order_id)
    await update.callback_query.answer(f"{oc} –æ—Ç–∫–ª–æ–Ω—ë–Ω", show_alert=True)
    order = await get_order(order_id)
    if order:
        _, user_id, pname, price, status, _ = order
        try:
            await context.bot.send_message(user_id, f"–í–∞—à –∑–∞–∫–∞–∑ {oc} –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        except Exception:
            pass

@admin_only
async def admin_list_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = await list_active_products()
    if not rows:
        txt = "–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç."
    else:
        lines = [f"{pid}. {name} ‚Äî {price}‚ÇΩ" for pid, name, price, _ in rows]
        txt = "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n" + "\n".join(lines)
    await update.callback_query.edit_message_text(txt, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]]))

@admin_only
async def admin_add_product_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["add_product_step"] = "name"
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:")

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get("add_product_step")
    if step:
        if update.effective_user.id not in ADMIN_IDS:
            return
        if step == "name":
            context.user_data["new_product_name"] = update.message.text.strip()
            context.user_data["add_product_step"] = "price"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö):")
            return
        elif step == "price":
            try:
                price = int(update.message.text.strip())
            except ValueError:
                await update.message.reply_text("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                return
            context.user_data["new_product_price"] = price
            context.user_data["add_product_step"] = "desc"
            await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '-' –¥–ª—è –ø—É—Å—Ç–æ–≥–æ):")
            return
        elif step == "desc":
            desc = update.message.text.strip()
            if desc == "-":
                desc = ""
            async with get_db() as db:
                await db.execute("INSERT INTO products (name, price, description) VALUES (?, ?, ?);", (context.user_data["new_product_name"], context.user_data["new_product_price"], desc))
            context.user_data.pop("add_product_step", None)
            await update.message.reply_text("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
            return
    if update.effective_user.id not in ADMIN_IDS:
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(admin_id, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{update.effective_user.username or update.effective_user.id}: {update.message.text}")
            except Exception:
                pass

async def callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data

    if data == "catalog":
        return await catalog(update, context)
    if data == "my_orders":
        return await my_orders(update, context)
    if data == "help":
        return await help_cmd(update, context)
    if data == "back_main":
        return await start(update, context)

    if data == "admin_back":
        return await admin_menu(update, context)
    if data == "admin_orders_pending":
        return await admin_orders_pending(update, context)
    if data == "admin_add_product":
        return await admin_add_product_start(update, context)
    if data == "admin_list_products":
        return await admin_list_products(update, context)

    if data.startswith("prod_"):
        pid = int(data.split("_")[1])
        return await product_view(update, context, pid)
    if data.startswith("buy_"):
        pid = int(data.split("_")[1])
        return await buy_product(update, context, pid)
    if data.startswith("paid_"):
        await q.answer("–ï—Å–ª–∏ –≤—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å—é–¥–∞.")
        return
    if data.startswith("admin_mark_paid_"):
        oid = int(data.split("_")[3])
        return await admin_mark_paid(update, context, oid)
    if data.startswith("admin_reject_"):
        oid = int(data.split("_")[2])
        return await admin_reject(update, context, oid)

    await q.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

async def init():
    await migrate()

def main():
    if not BOT_TOKEN:
        raise SystemExit("BOT_TOKEN is not set")
    app = Application.builder().token(BOT_TOKEN).build()
    app.post_init = init

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin_menu))
    app.add_handler(CallbackQueryHandler(callbacks))
    app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_payment_proof))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))

    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
